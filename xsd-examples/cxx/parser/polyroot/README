This example shows how to handle the xsi:type attributes when it is used
on root elements. For general coverage of XML Schema polymorphism handling
in the C++/Parser mapping see the polymorphism example.

The example consists of the following files:

supermen.xsd
  XML Schema which describes the "supermen" instance documents.

person.xml
superman.xml
batman.xml
  Sample XML instance documents.

supermen-pskel.hxx
supermen-pskel.cxx
  Parser skeletons generated by the XSD compiler from supermen.xsd using
  the following command line:

  xsd cxx-parser --generate-polymorphic supermen.xsd

  Or if using Expat instead of Xerces-C++ as the underlying XML parser:

  xsd cxx-parser --xml-parser=expat --generate-polymorphic supermen.xsd

  Note the use of the --generate-polymorphic command line option.

supermen-pimpl.hxx
supermen-pimpl.cxx
  Parser implementations that print the XML data to STDOUT.

driver.cxx
  Driver for the example. It implements a custom document parser
  that determines which XML Schema type is being parsed and uses
  the corresponding parser implementation. The driver first
  constructs a parser instance from all the individual parsers
  found in supermen-pimpl.hxx. In then invokes this parser instance
  to parse the input file.

To compile and link the example manually from the command line we can use
the following commands (replace 'c++' with your C++ compiler name):

c++ -c supermen-pskel.cxx
c++ -c supermen-pimpl.cxx
c++ -c driver.cxx
c++ -o driver driver.o supermen-pskel.o supermen-pimpl.o -lxerces-c

Or if using Expat as the underlying XML parser:

c++ -o driver driver.o supermen-pskel.o supermen-pimpl.o -lexpat

To run the example on the sample XML instance documents execute:

./driver person.xml
./driver superman.xml
./driver batman.xml
