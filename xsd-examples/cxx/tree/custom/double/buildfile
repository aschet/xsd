# file      : cxx/tree/custom/double/buildfile
# license   : not copyrighted - public domain

import libs  = libxsd%lib{xsd}
import libs += libxerces-c%lib{xerces-c}

./: exe{driver} doc{README}

exe{driver}: {hxx     cxx}{* -order -xml-schema} \
             {hxx ixx cxx}{order}                \
             {hxx        }{xml-schema}           \
             $libs

<{hxx ixx cxx}{order}>: xsd{order} $xsd
{{
  diag xsd ($<[0]) # @@ TMP

  $xsd cxx-tree --std c++11               \
       --generate-inline                  \
       --generate-serialization           \
       --extern-xml-schema xml-schema.xsd \
       --output-dir $out_base             \
       $path($<[0])
}}

hxx{xml-schema}: $xsd
{{
  diag xsd gen ($>[0])

  # Note that the specified xml-schema.xsd doesn't exist and is only used to
  # deduce the generated header name.
  #
  $xsd cxx-tree --std c++11                          \
       --generate-xml-schema                         \
       --generate-serialization                      \
       --custom-type double=double                   \
       --hxx-epilogue '#include "double-custom.hxx"' \
       --output-dir $out_base                        \
       xml-schema.xsd
}}

cxx.poptions =+ "-I$out_base" "-I$src_base"

# Define XSD_CXX11 since we include libxsd headers directly.
#
cxx.poptions += -DXSD_CXX11
